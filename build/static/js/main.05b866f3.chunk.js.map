{"version":3,"sources":["components/Logo.tsx","components/HomePage.tsx","utils/index.ts","components/AddLocation.tsx","components/PatientTable.tsx","components/CasesList.tsx","components/CaseDetails.tsx","components/LoginPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Logo","color","className","style","display","Content","Layout","Footer","Header","HomePage","children","minHeight","theme","mode","defaultSelectedKeys","Item","icon","EnvironmentOutlined","to","UserOutlined","margin","padding","textAlign","title","dataIndex","key","Title","Typography","Search","Input","Meta","Card","AddLocation","useState","options","setOptions","selected","setSelected","loading","setLoading","level","placeholder","allowClear","enterButton","size","marginBottom","onSearch","query","a","axios","get","headers","Authorization","localStorage","getItem","then","res","data","catch","err","notification","message","description","response","Group","onChange","e","target","value","width","map","idx","name","address","x_coord","y_coord","avatar","type","onClick","post","JSON","stringify","columns","PatientTable","patients","setPatients","error","setError","useEffect","patientList","fetchPatientList","dataSource","render","text","record","case_no","CasesList","cases","setCases","casesList","fetchCasesList","Panel","Collapse","CaseDetails","useParams","caseDetails","setCaseDetails","console","log","fetchCaseOne","confirmed","label","virus","origin","patient","hkid","dob","locations","visit","index","header","location","id","date_from","LoginPage","onFinish","username","password","token","setItem","success","document","href","marginRight","marginLeft","rules","required","Password","htmlType","NavBarLayout","exact","path","LoginLayout","height","flexDirection","justifyContent","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.05b866f3.chunk.js","sourcesContent":["import React from \"react\";\n\ninterface ILogoProps {\n  color?: string;\n}\n\nexport const Logo: React.FC<ILogoProps> = ({ color = \"white\" }) => (\n  <h2 className=\"logo\" style={{ color, display: \"inline\" }}>\n    HotZ🎯ne\n  </h2>\n);\n","import React from \"react\";\nimport { Layout, Menu } from \"antd\";\nimport { EnvironmentOutlined, UserOutlined } from \"@ant-design/icons\";\n\nimport { Logo } from \"./Logo\";\nimport { Link } from \"react-router-dom\";\n\nconst { Content, Footer, Header } = Layout;\n\ninterface HomePageProps {\n  children: React.ReactNode;\n}\n\nexport const HomePage: React.FC<HomePageProps> = ({ children }) => (\n  <Layout style={{ minHeight: \"100vh\" }}>\n    <Header>\n      <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={[\"2\"]}>\n          <Menu.Item key=\"0\">\n            <Logo />\n          </Menu.Item>\n          <Menu.Item key=\"1\" icon={<EnvironmentOutlined />}>\n            <Link to=\"/\">\n              Locations\n            </Link>\n          </Menu.Item>\n          <Menu.Item key=\"2\" icon={<UserOutlined />}>\n            <Link to=\"/cases\">\n              Cases\n            </Link>\n          </Menu.Item>\n          <Menu.Item key=\"3\" icon={<UserOutlined />}>\n            <Link to=\"/patients\">\n              Patients\n            </Link>\n          </Menu.Item>\n      </Menu>\n    </Header>\n    <Layout>\n      <Content style={{ margin: \"24px 16px 0\" }}>\n        <div\n          className=\"site-layout-background\"\n          style={{ padding: 24, minHeight: 360 }}\n        >\n          {children}\n        </div>\n      </Content>\n      <Footer style={{ textAlign: \"center\" }}>Made with ♥️</Footer>\n    </Layout>\n  </Layout>\n);\n","export const locationColumns = [\n  {\n    title: \"Name\",\n    dataIndex: \"name\",\n    key: \"name\",\n  },\n  {\n    title: \"X Co-ordinate\",\n    dataIndex: \"x_coord\",\n    key: \"x_coord\",\n  },\n  {\n    title: \"Y Co-ordinate\",\n    dataIndex: \"y_coord\",\n    key: \"y_coord\",\n  },\n  {\n    title: \"Address\",\n    dataIndex: \"address\",\n    key: \"address\",\n  },\n];\n\nexport const locationListColumns = [\n  {\n    title: \"ID\",\n    dataIndex: \"id\",\n    key: \"id\",\n  },\n  ...locationColumns,\n];\n","import React, { useState } from \"react\";\nimport { Typography, Button, Card, Input, Radio, notification } from \"antd\";\nimport axios from \"axios\";\n\nimport { LocationType } from \"../interfaces\";\n\nconst { Title } = Typography;\nconst { Search } = Input;\nconst { Meta } = Card;\n\nexport const AddLocation: React.FC = () => {\n  const [options, setOptions] = useState<Array<LocationType>>([]);\n  const [selected, setSelected] = useState<number | null>(null);\n  const [loading, setLoading] = useState<boolean>(false);\n\n  return (\n    <>\n      <Title level={2}>Add location to HotZone</Title>\n      <Search\n        placeholder=\"Enter Location Name\"\n        allowClear\n        loading={false}\n        enterButton=\"Search Location\"\n        size=\"large\"\n        style={{\n          marginBottom: 40,\n        }}\n        onSearch={async (query) =>\n          await axios\n            .get(\n              `https://group-q-hotzone.herokuapp.com/hotzone/locations/${query}`,\n              {\n                headers: {\n                  Authorization: `Token ${localStorage.getItem(\"token\")}`,\n                },\n              }\n            )\n            .then((res) => {\n              setOptions(res?.data);\n            })\n            .catch((err) => {\n              notification[\"error\"]({\n                message: \"Error Finding Location\",\n                description: err.response.data,\n              });\n            })\n        }\n      />\n      <Radio.Group\n        onChange={(e) => setSelected(e.target.value)}\n        value={selected}\n        style={{ width: \"100%\" }}\n      >\n        {options.map(({ name, address, x_coord, y_coord }, idx) => (\n          <Card key={idx}>\n            <Meta\n              avatar={\n                <Radio value={idx}>\n                  {name}\n                  {address && `, ${address}`} - {x_coord}, {y_coord}\n                </Radio>\n              }\n            />\n          </Card>\n        ))}\n      </Radio.Group>\n      {selected !== null && (\n        <Button\n          type=\"primary\"\n          style={{ width: \"100%\" }}\n          loading={loading}\n          onClick={async () => {\n            setLoading(true);\n            await axios\n              .post(\n                \"https://group-q-hotzone.herokuapp.com/hotzone/locations/\",\n                options[selected],\n                {\n                  headers: {\n                    Authorization: `Token ${localStorage.getItem(\"token\")}`,\n                  },\n                }\n              )\n              .then((res) => {\n                notification[\"success\"]({\n                  message: \"Location Created\",\n                  description: JSON.stringify(res.data),\n                });\n                setOptions([]);\n                setSelected(null);\n              })\n              .catch((err) => {\n                notification[\"error\"]({\n                  message: \"Error Creating Location\",\n                  description: err.response.data,\n                });\n              });\n            setLoading(false);\n          }}\n        >\n          Create Location\n        </Button>\n      )}\n    </>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { Typography } from \"antd\";\nimport { Space, Spin, Table } from \"antd\";\n\nconst { Title } = Typography;\n\ninterface PatientType {\n  hkid: string;\n  name: string;\n  dob: Date;\n}\n\nconst columns = [\n  {\n    title: \"HKID\",\n    dataIndex: \"hkid\",\n    key: \"hkid\",\n  },\n  {\n    title: \"Name\",\n    dataIndex: \"name\",\n    key: \"name\",\n  },\n  {\n    title: \"Date of Birth\",\n    dataIndex: \"dob\",\n    key: \"dob\",\n  },\n];\n\nexport const PatientTable: React.FC = () => {\n  const [patients, setPatients] = useState<Array<PatientType>>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState(\"\");\n\n  useEffect(() => {\n    const fetchPatientList = async () => {\n      setLoading(true);\n      try {\n        const response = await axios.get(\"https://group-q-hotzone.herokuapp.com/hotzone/patients.json\", {\n          headers: {\n            \"Authorization\": `Token ${localStorage.getItem(\"token\")}`\n          }\n        });\n        const patientList: Array<PatientType> = response.data;\n        setPatients(patientList);\n        setLoading(false);\n        setError(\"\");\n      } catch(e) {\n        setPatients([]);\n        setError(\"failed to fetch patients data\");\n        setLoading(false);\n      }\n    }\n\n    fetchPatientList();\n\n  }, []);\n\n  if (error && error !== \"\") {\n    return <p>{error}</p>\n  }\n\n  if (loading) {\n    return (\n      <Space size=\"middle\">\n        <Spin size=\"large\" />\n      </Space>\n    );\n  }\n\n  return (\n    patients && (\n      <>\n        <Title level={2}>All patients</Title>\n          <Table\n            dataSource={patients}\n            columns={columns}\n          />\n      </>\n    )\n  );\n}","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Link } from \"react-router-dom\";\nimport { Typography } from \"antd\";\nimport { Space, Spin, Table } from \"antd\";\n\nconst { Title } = Typography; \n\ninterface CaseType {\n  virus: Object;\n  case_no: number;\n  confirmed: Date;\n  origin: string;\n  patient: Object;\n  locations: Object;\n}\n\nconst columns = [\n  {\n    title: \"Pathogen\",\n    dataIndex: [\"virus\", \"name\"],\n    key: \"pathogen\",\n  },\n  {\n    title: \"Case number\",\n    dataIndex: \"case_no\",\n    key: \"case_no\",\n  },\n  {\n    title: \"Confirmed on\",\n    dataIndex: \"confirmed\",\n    key: \"confirmed\",\n  },\n  {\n    title: \"Origin\",\n    dataIndex: \"origin\",\n    key: \"origin\",\n  },\n  {\n    title: \"Patient Name\",\n    dataIndex: [\"patient\", \"name\"],\n    key: \"patient_name\",\n  },\n  {\n    title: \"Actions\",\n    key: 'actions',\n    render: (text: string, record: any) => (\n      <Link to={`/case/${record.case_no}`}>Details</Link>\n    )\n  }\n];\n\nexport const CasesList: React.FC = () => {\n  const [cases, setCases] = useState<Array<CaseType>>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState(\"\")\n\n  useEffect(() => {\n    const fetchCasesList = async () => {\n      setLoading(true);\n      try {\n        const response = await axios.get(\"https://group-q-hotzone.herokuapp.com/hotzone/cases.json\" , {\n          headers: {\n            \"Authorization\": `Token ${localStorage.getItem(\"token\")}`\n          }\n        });\n        const casesList: Array<CaseType> = response.data;\n        setCases(casesList);\n        setLoading(false);\n        setError(\"\");\n      } catch(e) {\n        setCases([]);\n        setError(\"failed to fetch cases data\");\n        setLoading(false);\n      }\n    }\n\n    fetchCasesList();\n  }, [])\n\n  if (error && error !== \"\") {\n    return <p>{error}</p>\n  }\n\n  if (loading) {\n    return (\n      <Space size=\"middle\">\n        <Spin size=\"large\" />\n      </Space>\n    );\n  }\n\n  return (\n    cases && (\n      <>\n        <Title level={2}>All cases</Title>\n          <Table\n            dataSource={cases}\n            columns={columns}\n          />\n      </>\n    )\n  );\n}","import React, { FC, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { \n  Layout, \n  Typography,\n  Breadcrumb,\n  Descriptions,\n  Space,\n  Spin,\n  Collapse,\n} from \"antd\";\n\nconst { Panel } = Collapse;\nconst { Content } = Layout;\nconst { Title } = Typography; \n\ninterface ParamType {\n  case_no: string\n}\n\ninterface VirusType {\n  disease: string;\n  max_infectious: number;\n  name: string;\n}\n\ninterface PatientType {\n  dob: string;\n  hkid: string;\n  name: string;\n}\n\ninterface VisitType {\n  case: string;\n  category: string;\n  date_from: string;\n  date_to: string;\n  location: LocationType;\n}\n\ninterface LocationType {\n  address: string;\n  id: number;\n  name: string;\n  x_coord: number;\n  y_coord: number;\n}\n\ninterface CaseType {\n  virus: VirusType;\n  case_no: number;\n  confirmed: Date;\n  origin: string;\n  patient: PatientType;\n  locations: Array<VisitType>;\n}\n\nexport const CaseDetails: React.FC = () => {\n  const { case_no } = useParams<ParamType>();\n  const [caseDetails, setCaseDetails] = useState<CaseType>({} as CaseType);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState(\"\");\n  \n  useEffect(() => {\n    const fetchCaseOne = async () => {\n      setLoading(true);\n      try {\n        const response = await axios.get(`https://group-q-hotzone.herokuapp.com/hotzone/case/${case_no}`, {  \n        headers: {\n          \"Authorization\": `Token ${localStorage.getItem(\"token\")}`\n        }});\n        const data: CaseType = response.data;\n        console.log(data);\n        setCaseDetails(data);\n        setLoading(false);\n        setError(\"\");\n      } catch(e) {\n        setCaseDetails({} as CaseType);\n        setLoading(false);\n        setError(\"failed to fetch case data\");\n      }\n    }\n\n    fetchCaseOne();\n  }, [case_no]);\n\n  if (error && error !== \"\") {\n    return <p>{error}</p>\n  }\n\n  if (loading) {\n    return (\n      <Space size=\"middle\">\n        <Spin size=\"large\" />\n      </Space>\n    );\n  }\n\n  return (\n    caseDetails.confirmed && (\n      <Content style={{ textAlign: 'left' }}>\n        <Breadcrumb>\n          <Breadcrumb.Item>\n            <Link to=\"/cases\">Cases</Link>\n          </Breadcrumb.Item>\n          <Breadcrumb.Item>\n            {`Case number: #${case_no}`}\n          </Breadcrumb.Item>\n        </Breadcrumb>\n        <Title level={2}>{`Case details`}</Title>\n        <Descriptions title=\"Case details\">\n          <Descriptions.Item label=\"Infecting pathogen\">\n            {caseDetails.virus.name}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"Confirmed date\">\n            {caseDetails.confirmed}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"Origin\">\n            {caseDetails.origin === \"I\" ? \"Imported\" : \"Local\"}\n          </Descriptions.Item>\n        </Descriptions>\n        <Descriptions title=\"Patient\">\n          <Descriptions.Item label=\"HKID\">\n            {caseDetails.patient.hkid}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"Name\">\n            {caseDetails.patient.name}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"Date of birth\">\n            {caseDetails.patient.dob}\n          </Descriptions.Item>\n        </Descriptions>\n        <Title level={3}>Locations visited</Title>\n        <Collapse>\n          {caseDetails.locations.map((visit: VisitType, index) => (\n          <Panel \n            key={`${visit.location.name} ${visit.date_from}`} \n            header={`${visit.location.name}`}\n          >\n            <Descriptions>\n              <Descriptions.Item label=\"Location ID\">\n                {visit.location.id}\n              </Descriptions.Item>\n              <Descriptions.Item label=\"Name\">\n                {visit.location.address}\n              </Descriptions.Item>\n              <Descriptions.Item label=\"X coordinates\">\n                {visit.location.x_coord}\n              </Descriptions.Item>\n              <Descriptions.Item label=\"Y coordinates\">\n                {visit.location.y_coord}\n              </Descriptions.Item>\n            </Descriptions>\n          </Panel>\n          ))}\n        </Collapse>\n      </Content>\n    )\n  );\n}","import React, { useState } from \"react\";\nimport { Form, Input, Button, message } from \"antd\";\nimport axios from \"axios\";\nimport { Logo } from \"./Logo\";\n\ninterface ILogin {\n  username: string;\n  password: string;\n}\n\nexport const LoginPage: React.FC = () => {\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const onFinish = async ({ username, password }: ILogin) => {\n    setLoading(true);\n    try {\n      const response = await axios.post(\n        \"https://group-q-hotzone.herokuapp.com/login/\",\n        {\n          username,\n          password,\n        }\n      );\n      const token = response.data.token;\n      if (token) {\n        localStorage.setItem(\"token\", token);\n        localStorage.setItem(\"userLoggedIn\", username);\n      }\n      message.success(\"logged in successfully\");\n      //reroute to home page\n      document.location.href = \"/\";\n    } catch (e) {\n      message.error(\"failed to login\");\n    }\n\n    setLoading(false);\n  };\n\n  return (\n    <>\n      <Logo color=\"black\" />\n      <Form\n        style={{ marginRight: \"auto\", marginLeft: \"auto\", width: \"50%\" }}\n        name=\"basic\"\n        onFinish={onFinish}\n      >\n        <Form.Item\n          label=\"Username\"\n          name=\"username\"\n          rules={[{ required: true, message: \"Please input your username!\" }]}\n        >\n          <Input />\n        </Form.Item>\n\n        <Form.Item\n          label=\"Password\"\n          name=\"password\"\n          rules={[{ required: true, message: \"Please input your password!\" }]}\n        >\n          <Input.Password />\n        </Form.Item>\n\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\" loading={loading}>\n            Submit\n          </Button>\n        </Form.Item>\n      </Form>\n    </>\n  );\n};\n","import React, { FC } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\n\nimport \"./App.css\";\nimport { HomePage, AddLocation, PatientTable, CasesList, LoginPage, CaseDetails } from \"./components\";\n\nconst NavBarLayout = () => {\n  if (!localStorage.getItem(\"token\")) {\n    return <Redirect to=\"/login\" />\n  }\n\n  return (\n    <HomePage>\n      <Switch>\n        <Route exact path=\"/\">\n          <AddLocation />\n        </Route>\n        <Route exact path=\"/cases\">\n          <CasesList />\n        </Route>\n        <Route path=\"/case/:case_no\">\n          <CaseDetails />\n        </Route>\n        <Route exact path=\"/patients\">\n          <PatientTable />\n        </Route>\n      </Switch>\n    </HomePage>\n  )\n}\n\nconst LoginLayout = () => (\n  <div style={{ height: \"100%\", display: \"flex\", flexDirection: \"column\", justifyContent: \"center\" }}>\n    <LoginPage />\n  </div>\n)\n\nconst App: FC = () => (\n  <div className=\"App\" style={{ height: \"100vh\" }}>\n    <Router>\n      <Switch>\n        <Route path=\"/login\">\n          <LoginLayout />\n        </Route>\n        <Route path=\"/\">\n          <NavBarLayout />\n        </Route>\n      </Switch>\n    </Router>\n  </div>\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}